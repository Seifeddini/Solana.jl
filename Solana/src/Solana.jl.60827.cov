        - module Solana
        - 
        - # include("SolanaTypes.jl")
        - # using .SolanaTypes
        - using JSON, Base64, Base58, HTTP, Logging
        - 
        - const RPC_URL = ENV["RPC_URL"]
        - 
        - # function get_block(slot=nothing)
        - #     data = Dict(
        - #         "jsonrpc" => "2.0",
        - #         "id" => 1,
        - #         "method" => "getBlock",
        - #         "params" => [
        - #             slot === nothing ? "recent" : slot,
        - #             Dict(
        - #                 "encoding" => "json",
        - #                 "maxSupportedTransactionVersion" => 0,
        - #                 "transactionDetails" => "full",
        - #                 "rewards" => false
        - #             )
        - #         ]
        - #     )
        - 
        - #     try
        - #         response = HTTP.request(
        - #             "POST",
        - #             RPC_URL,
        - #             ["Content-Type" => "application/json"],
        - #             body=JSON.json(data)
        - #         )
        - 
        - #         body = JSON.parse(String(response.body))
        - 
        - #         if haskey(body, "error")
        - #             @warn "Error fetching block: $(body["error"]["message"])"
        - #             return nothing
        - #         end
        - 
        - #         return body["result"]
        - #     catch e
        - #         @error "Exception occurred: $e"
        - #         return nothing
        - #     end
        - # end
        - 
        - # function get_latest_slot()
        - #     data = Dict(
        - #         "jsonrpc" => "2.0",
        - #         "id" => 1,
        - #         "method" => "getSlot",
        - #         "params" => []
        - #     )
        - 
        - #     response = HTTP.request(
        - #         "POST",
        - #         RPC_URL,
        - #         ["Content-Type" => "application/json"],
        - #         body=JSON.json(data)
        - #     )
        - 
        - #     body = JSON.parse(String(response.body))
        - #     return body["result"]
        - # end
        - 
        - # function create_token()
        - #     output = read(`spl-token create-token`, String)
        - 
        - #     address = match(r"Address:\s+(\w+)", output).captures[1]
        - #     program = match(r"under program\s+(\w+)", output).captures[1]
        - #     decimals = parse(Int, match(r"Decimals:\s+(\d+)", output).captures[1])
        - #     signature = match(r"Signature:\s+(\w+)", output).captures[1]
        - 
        - #     return Dict(
        - #         "address" => address,
        - #         "program" => program,
        - #         "decimals" => decimals,
        - #         "signature" => signature
        - #     )
        - # end
        - 
        - # function create_token_account(token_address)
        - #     output = read(`spl-token create-account $token_address`, String)
        - 
        - #     account_address = match(r"Creating account\s+(\w+)", output).captures[1]
        - #     signature = match(r"Signature:\s+(\w+)", output).captures[1]
        - 
        - #     return Dict(
        - #         "account_address" => account_address,
        - #         "signature" => signature
        - #     )
        - # end
        - 
        - # function mint_token(token_address, amount)
        - #     output = read(`spl-token mint $token_address $amount`, String)
        - #     return true
        - # end
        - 
        - # function check_token_balance(token_address)
        - #     output = read(`spl-token balance $token_address`, Int)
        - #     return output
        - # end
        - 
        4 function base58_encode(data::Vector{UInt8})
        4     alphabet = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
        4     num = BigInt(0)
        - 
        -     # Convert byte array to BigInt
        4     for byte in data
      128         num = num * 256 + byte
      128     end
        - 
        -     # Encode to Base58
        4     encoded = ""
      180     while num > 0
      176         num, remainder = divrem(num, 58)
      176         encoded = alphabet[remainder+1] * encoded
      176     end
        - 
        -     # Add leading '1's for each leading zero byte in the input
        4     for byte in data
        4         if byte == 0
        0             encoded = "1" * encoded
        -         else
        4             break
        -         end
        0     end
        - 
        4     return encoded
        - end
        - 
        2 function read_wallet_keys(filename::String)
        -     # Read and parse the JSON file
        2     json_data = JSON.parsefile(filename)
        - 
        -     # Convert the integer array to bytes
        2     byte_array = UInt8.(json_data)
        - 
        -     # Extract private and public keys
        2     private_key_bytes = byte_array[1:32]
        2     public_key_bytes = byte_array[33:end]
        - 
        2     public_key_string = base58_encode(public_key_bytes)
        2     private_key_string = base58_encode(private_key_bytes)
        - 
        2     return private_key_string, public_key_string
        - end
        - 
        2 function create_wallet(name::String)::Wallet
        2     @info "Start Wallet Creation"
        2     val = run(`solana-keygen new --force --no-bip39-passphrase --outfile  "~"/SolWallets/$name.json`)
        2     @info "New Wallet created"
        - 
        2     private_key, public_key = read_wallet_keys("~/SolWallets/$name.json")
        - 
        2     return Wallet(name, public_key, private_key)
        - end
        - 
        2 function airdrop_sol(pubkey, amount::Int)
        - 
        4     payload = Dict(
        -         "jsonrpc" => "2.0",
        -         "id" => 1,
        -         "method" => "requestAirdrop",
        -         "params" => [pubkey, string(amount)]
        -     )
        - 
        2     response = HTTP.post(RPC_URL,
        -         ["Content-Type" => "application/json"],
        -         JSON.json(payload))
        - 
        2     @info "Airdropped $amount lamports to $pubkey. Amount in SOL: " amount / 10^9
        - 
        2     return JSON.parse(String(response.body))
        - 
        - end
        - 
        2 function get_balance(pubkey)
        -     # Create the payload for the JSON RPC request
        2     payload = Dict(
        -         "jsonrpc" => "2.0",
        -         "id" => 1,
        -         "method" => "getBalance",
        -         "params" => [pubkey]
        -     )
        - 
        -     # Send the HTTP POST request to the local test validator
        2     response = HTTP.post(RPC_URL, ["Content-Type" => "application/json"], JSON.json(payload))
        - 
        -     # Parse and return the response
        2     result = JSON.parse(String(response.body))
        2     if haskey(result, "result") && haskey(result["result"], "value")
        2         return result["result"]["value"]  # Balance in lamports
        -     else
        0         error("Failed to fetch balance: ", result)
        -     end
        - end
        - 
        - 
        - # STRUCTS
        - 
        - struct AccountMeta
        -     pubkey::Vector{UInt8}
        -     is_signer::Bool
        -     is_writable::Bool
        - end
        - 
        - struct Instruction
        -     program_id::Vector{UInt8}
        -     accounts::Vector{AccountMeta}
        -     data::Vector{UInt8}
        - end
        - 
        - struct MessageHeader
        -     num_required_signatures::UInt8
        -     num_readonly_signed_accounts::UInt8
        -     num_readonly_unsigned_accounts::UInt8
        - end
        - 
        - struct Message
        -     header::MessageHeader
        -     account_keys::Vector{Vector{UInt8}}
        -     recent_blockhash::Vector{UInt8}
        -     instructions::Vector{Instruction}
        - end
        - 
        - struct Transaction
        -     signatures::Vector{Vector{UInt8}}
        -     message::Message
        - end
        - 
        - struct Wallet
        2     name::String
        -     pubkey::String
        -     secretkey::String
        - end
        - end
